				SQL Сервер
Грамматика:
start -> SELECT select() | INSERT insert() | UPDATE update() | DELETE delete() | CREATE create() | DROP drop()

select -> list_fields() FROM name_table() where()
list_fields() -> ID {, ID} | *
name_table() -> ID

insert() -> INTO name_table() field_value()
field_value() -> ( f_val {, f_val} )
f_val -> STR | [-] NUM
STR -> 'любые символы кроме апострофа'
NUM -> беззнаковое целое число

update() -> name_table() SET field_name() = expression() where()
field_name() -> ID

delete() -> FROM name_table() where()

create() -> TABLE name_table() ( list_descriptions() )
list_descriptions() -> field_name() field_type() {, field_name() field_type()}
field_type() -> TEXT (NUM) | LONG

drop() -> TABLE name_table()

where() -> WHERE ALL | expression() conditions()
conditions() -> [NOT] LIKE string_sample | [NOT] IN ( list_const() ) | eps
string_sample() -> STR
list_const() -> STR {, STR} | [-] NUM {, [-] NUM}
expression() -> term() {+|-|OR  term() }
term() -> factor() {*|/|%|AND factor() }
factor() -> NOT factor | ( expression() attitude() | value()
attitude() -> ) |  =|!=|>=|<=|>|<  expression()  )
value() -> [-] NUM | ID | STR


В данном задании были реализованы лексический и синтаксический анализаторы, с отсечением лишних цепочек, допускаемых расширенной грамматикой, но невозможных по исходной. Были реализованы запросы CREATE по созданию таблицы, INSERT - вставка новых записей в таблицу, DROP - удаление таблицы, UPDATE - обновление записей таблицы, DELETE - удаление записи из таблицы. SELECT выбирает из таблицы некоторые поля и записи, возвращает "новую таблицу", которая печатается в клиенте. WHERE-клауза служит для отбора некоторых строк в таблице. В ней реализованы: LIKE - сравнивает значение текстового поля со строкой-образцом, IN - проверяет принадлежит ли значение поля списку констант, который идет сразу же после ключевого слова IN. 
Над числами и полями типа Long реализованы следующие операции: +, -, *, /, %, >, >= , <, <=, ==, !=. Над строками и полями типа Text: >, >= , <, <=, ==, !=. Над логическими выражениями - NOT, AND, OR.
Признаком конца операции является символ ';', который встретился не в апострофах, т.е. выражение типа 'fd;' не будет законченной командой, а выражение 'fd;'; будет.
Клиент завершает свою работу при вводе специальной команды stop; или по признаку конца файла (EOF).
Клиент, не анализируя запрос, считывает его со стандартного потока ввода и передает клиенту. В клиенте происходит анализ команды, а затем её выполнение. При неверном запросе или какой-либо другой ошибке сервер сообщает об этом клиенту, который в свою очередь говорит об этом пользователю. Если команда выполниласть успешно то выведется сообщение "ОК".
Оболочка клиент-сервера была взята из Р3.
