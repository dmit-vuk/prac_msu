						Программа калькулятор
Прогмма состоит из 5 модулей: main, polis, stack, funcs, vars.
Калькулятор сделан для чисел типа double.
Сначала программа просит пользователя ввести выражение. Признаком конца выражения считается перевод строки или EOF.
Далее при корректном вводе программа просит пользователя ввести значения переменных. Признаком конца ввода считается строка "end". (подробнее читать в vars)
Если значения всех переменных введены, то программа посчитает выражение и выведет результат на экран, иначе выведет соответсвующее сообщение об ошибке.
Далее она спрашивает хочет ли пользователь продолжить работу с калькулятором и  изменить значения переменных. Если пользователь хочет продолжить, то надо ввести символ 'y', иначе 'n'. Программа будет ждать пока не будет введён один из этих символов и проигнорирует всё, что идёт после этих символов до перевода строки.
Далее программа просит ввести новые значения переменных и т.д.

Программа осуществляет следующий контроль ввода:
1) нарушение баланса скобок ( с указанием – открывающих / закрывающих)
2) отсутствие операнда
3) пропуск операции
4) недопустимая операция
5) неверный операнд
Если будет введена переменная длиной более 6 символов, будет выведено сообщение с ошибкой.
При нарушении ввода выражения программа выдаёт текст с ошибкой и просит пользователя заново ввести выражение.
Если возникает какая-либо ошибка на стадии счёта выражения, прогрмма выдаст сообщение Error!!
Если введено 12$15, то '$' считается некорректной операцией. Если введено а$с, то это считается некорректым операндом. Имя переменной может включать в себя только латинские буквы, цифры и симол '_'. Имя переменной обязано начинаться с буквы.
Выпажение типа 12а программа посчитает ошибочным, будет выведено сообщение о пропуске операции. Выражение типа а12 считается именем переменной.

				

						Модуль polis
Модуль для раборы с польской записью выражения. Функция add_dec считывает '+' или '-', функция mul_div '*' или '/', функция symbol число или переменную. Далее они отправляют считанные строки в make_polis, которая уже заносит соответствующие данные в полиз. Полиз хранится следующим способом:
typedef struct
{
    void *data; //указатель на массив байтов
    size_t size; // размер массива
} Polis;

в массиве data данные хранятся побайтово. Сначала идёт один байт, его значением является то, сколько последующих байт относится к элементу. Далее идёт указатель на функцию (подробнее в funcs), а далее сам элемент: число, переменная или операция.

						Модуль stack
Стек хранится следующим образом

typedef struct Stack
{
    size_t curr_size; // текущий размер стека
    size_t act_size; // сколько всего выделено под стек
    char *data; // данные
} Stack;
Данные хранятся аналогично побайтово.

Константы:
INIT_SIZE 1024 // размер при инициализации
MEM_EXH 3 // ошибка при pop_stack, пытаемся считаь больше возможного
MEM_OVER 4 // ошибка при попытке выделить больше памяти под стек.

Функция init_stack инициализиует стек с curr_size равным нулю и act_size = INIT_SIZE.

Функция delete_stack удаляет исходный стек, curr_size = act_size = 0.
Функция pop_stack(Stack *stack, void *res, size_t size_res) считывает со стека stack данные в переменную res размера size_res. Если возникает попытка считать больше данных, чем есть в стеке, возникает ошибка с кодом MEM_EXH.

Функция push_stack(Stack *stack, void *res, size_t size_res) записвает в стек stack данные в переменную res размера size_res. Если выделенного под стек места не хватает, то запрашивается удвоение длины стека. Если памяти не хватает, то выдаётся ошибка с кодом MEM_OVER

						Модуль funcs
Константы:
DIV_ZERO 1
MISS_VAR 2

В данном модуле реализованы функции для работы с данными в полизе.

num_func считывает из полиза число размером double и заносит его в стек.
Функции add_func, dec_func, mul_func, div_func считывают из стека 2 операнда, производят соответсвующие вычисления и заносят результат в стек. При этом в функции div_func может быть выброшено исключение с кодом DIV_ZERO при попытке деления на ноль.
Функция vars_func вычисляет значение переменной и заносит его в стек. Если значение переменной не было указано, то будет выброшено исключение с кодом MISS_VAR.

						Модуль vars

VAR_LEN 6 максимальная длина переменной
LONG_LENG 7
MAX_LEN 1024

Таблица переменных хранится списком
struct var_list
{
    char str[VAR_LEN + 1]; // имя переменной
    double value; // значение
    struct var_list *next;
};

typedef struct var_list *vars;

Для работы была создана глобальная переменная:
vars tab_vars

Функция int read_vars считывает с stdin значения переменных. Если имя переменной окажется длинее VAR_LEN, будет выброшено исключение с кодом ошибки LONG_LENG Данные должны подаваться следующим образом:
а = 5.1
с = -6
end
строка "end" считается признаком конца ввода переменных.
Именем переменной в данном случае считается всё что идёт до пробела или '='.
Считается, что максимальная длина строки не превзойдёт MAX_LEN элементов.
Не соблюдение правил ввода может привести к ошибке!!! Данные следует вводить строго по правилу.

delete_vars удаляет соответствующую таблицу переменных.



